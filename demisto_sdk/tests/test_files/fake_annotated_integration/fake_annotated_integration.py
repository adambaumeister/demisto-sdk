from typing import Callable
from dataclasses import dataclass
import enum

"""
This is a mock integration that uses the CommandRegister class to store XSOAR commands, allowing code to 
be autogenerated. 

Note that this isn't a complete implementation of the commandregister clas  s, as it has no run functions. 
"""
class CommandRegister:
    commands: dict[str, Callable] = {}
    file_commands: dict[str, Callable] = {}

    def command(self, command_name: str):
        """
        Register a normal Command for this Integration. Commands always return CommandResults.

        :param command_name: The XSOAR integration command
        """

        def _decorator(func):
            self.commands[command_name] = func

            def _wrapper(topology, demisto_args=None):
                return func(topology, demisto_args)

            return _wrapper

        return _decorator

    def file_command(self, command_name: str):
        """
        Register a file command. file commands always return FileResults.

        :param command_name: The XSOAR integration command
        """

        def _decorator(func):
            self.file_commands[command_name] = func

            def _wrapper(topology, demisto_args=None):
                return func(topology, demisto_args)

            return _wrapper

        return _decorator


# This is the store of all the commands available to this integration
COMMANDS = CommandRegister()


class ExampleEnum(enum.Enum):
    EXAMPLE_FIRST_OPTION = "FirstOption"
    EXAMPLE_SECOND_OPTION = "SecondOption"


@dataclass
class ExampleReturnClass:
    """
    :param example_attr: An Example output attribute
    """
    example_attr: str
    _output_prefix = "Example"
    _title = "This is some example data"


@dataclass
class DemistoParameters:
    """
    Demisto Parameters
    :param  example_integration_param: Example Param
    """
    example_integration_param: str
    credentials: dict


@COMMANDS.command("fake-command")
def fake_command(fake_argument: str) -> ExampleReturnClass:
    """
    This is an example command with a simple, mandatory string argument.
    :param fake_argument: This is a fake argument
    """
    return ExampleReturnClass(
        example_attr="Hi, this is an example returned object."
    )


@COMMANDS.command("fake-command-optional-argument")
def fake_command_optional_argument(fake_optional_argument: str = "default_value"):
    """
    This is an example command with a simple, optional argument with a default value.
    :param fake_optional_argument: This is a fake argument
    """
    pass


@COMMANDS.command("fake-command-enum-argument")
def fake_command_optional_argument(fake_enum_argument: ExampleEnum):
    """
    This is an example command with a mandatory argument with predefined values.
    :param fake_enum_argument: This is a fake argument
    """
    pass


@COMMANDS.command("fake-command-list-argument")
def fake_command_optional_argument(fake_list_argument: list):
    """
    This is an example command with a list argument.
    :param fake_list_argument: This is a fake argument
    """
    pass


@COMMANDS.command("test-module")
def test_module_command():
    """This is the example test-module command. Though it is registered, it should not appear in the
    integration YAML"""
    pass
